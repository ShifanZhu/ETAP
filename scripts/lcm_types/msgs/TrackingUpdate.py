"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class TrackingUpdate(object):

    __slots__ = ["timestamp_us", "feature_ids", "feature_x", "feature_y"]

    __typenames__ = ["int64_t", "int32_t", "float", "float"]

    __dimensions__ = [None, [50], [50], [50]]

    def __init__(self):
        self.timestamp_us = 0
        """ LCM Type: int64_t """
        self.feature_ids = [ 0 for dim0 in range(50) ]
        """ LCM Type: int32_t[50] """
        self.feature_x = [ 0.0 for dim0 in range(50) ]
        """
        order matches x/y
        LCM Type: float[50]
        """

        self.feature_y = [ 0.0 for dim0 in range(50) ]
        """ LCM Type: float[50] """

    def encode(self):
        buf = BytesIO()
        buf.write(TrackingUpdate._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp_us))
        buf.write(struct.pack('>50i', *self.feature_ids[:50]))
        buf.write(struct.pack('>50f', *self.feature_x[:50]))
        buf.write(struct.pack('>50f', *self.feature_y[:50]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != TrackingUpdate._get_packed_fingerprint():
            raise ValueError("Decode error")
        return TrackingUpdate._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = TrackingUpdate()
        self.timestamp_us = struct.unpack(">q", buf.read(8))[0]
        self.feature_ids = struct.unpack('>50i', buf.read(200))
        self.feature_x = struct.unpack('>50f', buf.read(200))
        self.feature_y = struct.unpack('>50f', buf.read(200))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if TrackingUpdate in parents: return 0
        tmphash = (0xa9c696c0d75169d9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if TrackingUpdate._packed_fingerprint is None:
            TrackingUpdate._packed_fingerprint = struct.pack(">Q", TrackingUpdate._get_hash_recursive([]))
        return TrackingUpdate._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", TrackingUpdate._get_packed_fingerprint())[0]

